#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('./app');
var debug = require('debug')('info:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '40000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var socketio = require('socket.io');
var io = socketio.listen(server);

var kafka = require('kafka-node'),
  Producer = kafka.Producer,
  Consumer = kafka.Consumer,
  KeyedMessage = kafka.KeyedMessage,
  client = new kafka.KafkaClient({ kafkaHost: '202.31.147.196:9092' }),
  consumer = new Consumer(
    client,
    [
      { topic: 'EventTopic', partition: 0 }
    ],
    {
      autoCommit: false
    }
  ),
  producer = new Producer(client),
  km = new KeyedMessage('key', 'message');
  

io.sockets.on('connection', function (socket) {

  // 클라이언트에게 메시지 송신
  // socket.emit('kafka_msg', "Connection");

  // 클라이언트가 전송한 메시지 수신
  socket.on('kafka_producer', function (data) {
    console.log('Message from Client: ' + data);

    payloads = [
      { topic: 'EventTopic', messages: data, partition: 0 }
    ];

    producer.send(payloads, function (err, data) {
      console.log(data);
    });
  });

  // Kafka 컨슈머에서 메시지 Polling
  consumer.on('message', function (message) {
    // 클라이언트에게 메시지 송신
    socket.emit('kafka_consumer', message);
    // console.log('Server : ' +message);
  });
});



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
