<!doctype html>
<html lang="en">

<% include ./headers/header %>
<style>
    /* popup style */
    .ol-popup {
      max-width:300px;
      min-width:100px;
      min-height:1em;
    }
    /* Image on popup */
    .ol-popup img {
      float: left;
      margin: 0 0.5em 0 0;
      max-width: 100px;
      max-height: 100px;
    }
    /* no image content tooltips */
    .ol-popup.tooltips img {
      display:none;
    }
    /* Custom red style (tips) */
    .ol-popup.red > div {
      background-color: red;
    }
    .ol-popup.red .anchor {
      color: red;
    }

    /* Custom orange style (tips) */
    .ol-popup.tips.orange > div {
      border-color:#da7;
      background-color:#eca;
    }
    .ol-popup.tips.orange .anchor {
      color: #da7;
    }

    /* orange style (default) */
    .ol-popup.default.orange > div {
      border:4px solid #f96;
    }
    .ol-popup.default.orange .anchor {
      margin: -10px 22px;
    }
    .ol-popup.default.orange .anchor::after {
      margin: 5px -11px; 
    }
    .ol-popup-middle.default.orange .anchor::after {
      margin: -10.5px -27px /*border:4 +2 px */; 
    }
    .ol-popup.default.orange .anchor {
      color: #f96;
    }
    .ol-popup.default.orange .closeBox {
      background-color: rgba(255, 153, 102, 0.7);
    }
    .ol-popup.default.orange .closeBox:hover {
      background-color: rgba(255, 153, 102, 1);
    }
</style>
<body>

    <div style="height:6%;line-height:60px;vertical-align:middle;">
        <div style="float:right;">
            <button class="cbutton" onclick="send_kafkaMsg('1', 'evt_001')">일반 이벤트 1</button>
            <button class="cbutton" onclick="send_kafkaMsg('2', 'evt_001')">일반 이벤트 2</button>
            <button class="cbutton" onclick="send_kafkaMsg('3', 'evt_001')">일반 이벤트 3</button>
            <button class="cbutton" onclick="send_kafkaMsg('1', 'evt_003')">키퍼 이벤트</button>

        </div>
    </div>

    <!-- DIV pour la carte -->
    <div id="map" style="height:94%;"></div>

    <script type="text/javascript">

        var view = new ol.View({
            projection: 'EPSG:4326',
            center: [106.764194, 10.854639],
            // center: [127.153789, 35.823685],
            zoom: 16
        });

        var map = new ol.Map({
            target: 'map',
            layers: [
                new ol.layer.Tile({
                    // A layer must have a title to appear in the layerswitcher
                    title: 'VWorld 2D',
                    // Again set this layer as a base layer
                    type: 'base',
                    visible: false,
                    source: new ol.source.XYZ({
                        url: 'http://xdworld.vworld.kr:8080/2d/Base/service/{z}/{x}/{y}.png'
                    })
                }),
                new ol.layer.Tile({
                    // A layer must have a title to appear in the layerswitcher
                    title: 'VWorld 2D 위성지도',
                    // Again set this layer as a base layer
                    type: 'base',
                    visible: false,
                    source: new ol.source.XYZ({
                        url: 'http://xdworld.vworld.kr:8080/2d/Satellite/service/{z}/{x}/{y}.jpeg'
                    })
                }),
                new ol.layer.Tile({
                    // A layer must have a title to appear in the layerswitcher
                    title: 'OSM',
                    // Again set this layer as a base layer
                    type: 'base',
                    visible: true,
                    source: new ol.source.OSM()
                })
            ],
            view: view
        });
        
        var home = new ol.Overlay.Placemark({
            // color: '#369',
            // backgroundColor : 'yellow',
            contentColor: '#000',

        });
        map.addOverlay(home);
        home.show([106.764194, 10.854639]);

        var evt_01 = '{"msg_code": "EVT_001","msg_type": "RT","msg_name": "이벤트 테스트 1","msg_loc": [106.760540, 10.853545],"img": "/images/car1.jpg"}';
        var evt_02 = '{"msg_code": "EVT_001","msg_type": "RT","msg_name": "이벤트 테스트 2","msg_loc": [106.765661, 10.857595],"img": "/images/car2.jpg"}';
        var evt_03 = '{"msg_code": "EVT_001","msg_type": "RT","msg_name": "이벤트 테스트 3","msg_loc": [106.772865, 10.852145],"img": "/images/car3.jpg"}';

        var evt_value = new Array();
        evt_value[0] = '{"msg_code": "EVT_003","msg_type": "RT","msg_level": 1,"msg_name": "키퍼 Kims 1","msg_loc": [106.759476, 10.853518],"img": "/images/road1.jpg"}';
        evt_value[1] = '{"msg_code": "EVT_003","msg_type": "RT","msg_level": 1,"msg_name": "키퍼 Kims 2","msg_loc": [106.759383, 10.853610],"img": "/images/road2.jpg"}';
        evt_value[2] = '{"msg_code": "EVT_003","msg_type": "RT","msg_level": 2,"msg_name": "키퍼 Kims 3","msg_loc": [106.759326, 10.853675],"img": "/images/road3.jpg"}';
        evt_value[3] = '{"msg_code": "EVT_003","msg_type": "RT","msg_level": 1,"msg_name": "키퍼 Kims 4","msg_loc": [106.759234, 10.853756],"img": "/images/road1.jpg"}';
        evt_value[4] = '{"msg_code": "EVT_003","msg_type": "RT","msg_level": 1,"msg_name": "키퍼 Kims 5","msg_loc": [106.759216, 10.853810],"img": "/images/road2.jpg"}';
        evt_value[5] = '{"msg_code": "EVT_003","msg_type": "RT","msg_level": 3,"msg_name": "키퍼 Kims 6","msg_loc": [106.759304, 10.853870],"img": "/images/road2.jpg"}';
        evt_value[6] = '{"msg_code": "EVT_003","msg_type": "RT","msg_level": 1,"msg_name": "키퍼 Kims 7","msg_loc": [106.759362, 10.853924],"img": "/images/road2.jpg"}';
        evt_value[7] = '{"msg_code": "EVT_003","msg_type": "RT","msg_level": 2,"msg_name": "키퍼 Kims 8","msg_loc": [106.759425, 10.853968],"img": "/images/road2.jpg"}';
        evt_value[8] = '{"msg_code": "EVT_003","msg_type": "RT","msg_level": 2,"msg_name": "키퍼 Kims 9","msg_loc": [106.759488, 10.854012],"img": "/images/road2.jpg"}';
        evt_value[9] = '{"msg_code": "EVT_003","msg_type": "RT","msg_level": 1,"msg_name": "키퍼 Kims 10","msg_loc": [106.759543, 10.854055],"img": "/images/road2.jpg"}';
        evt_value[10] = '{"msg_code": "EVT_003","msg_type": "RT","msg_level": 1,"msg_name": "키퍼 Kims 11","msg_loc": [106.759586, 10.854085],"img": "/images/road2.jpg"}';

        var evt_value2 = new Array();
        evt_value2[0] = '{"msg_code": "EVT_003","msg_type": "RT","msg_level": 1,"msg_name": "키퍼 Parks 1","msg_loc": [106.760427, 10.853252],"img": "/images/road1.jpg"}';
        evt_value2[1] = '{"msg_code": "EVT_003","msg_type": "RT","msg_level": 3,"msg_name": "키퍼 Parks 2","msg_loc": [106.760418, 10.853195],"img": "/images/road2.jpg"}';
        evt_value2[2] = '{"msg_code": "EVT_003","msg_type": "RT","msg_level": 1,"msg_name": "키퍼 Parks 3","msg_loc": [106.760398, 10.853128],"img": "/images/road3.jpg"}';
        evt_value2[3] = '{"msg_code": "EVT_003","msg_type": "RT","msg_level": 2,"msg_name": "키퍼 Parks 4","msg_loc": [106.760372, 10.853050],"img": "/images/road1.jpg"}';
        evt_value2[4] = '{"msg_code": "EVT_003","msg_type": "RT","msg_level": 1,"msg_name": "키퍼 Parks 5","msg_loc": [106.760341, 10.852971],"img": "/images/road2.jpg"}';
        evt_value2[5] = '{"msg_code": "EVT_003","msg_type": "RT","msg_level": 2,"msg_name": "키퍼 Parks 6","msg_loc": [106.760321, 10.852907],"img": "/images/road2.jpg"}';
        evt_value2[6] = '{"msg_code": "EVT_003","msg_type": "RT","msg_level": 1,"msg_name": "키퍼 Parks 7","msg_loc": [106.760294, 10.852844],"img": "/images/road2.jpg"}';
        evt_value2[7] = '{"msg_code": "EVT_003","msg_type": "RT","msg_level": 3,"msg_name": "키퍼 Parks 8","msg_loc": [106.760228, 10.852759],"img": "/images/road2.jpg"}';
        evt_value2[8] = '{"msg_code": "EVT_003","msg_type": "RT","msg_level": 1,"msg_name": "키퍼 Parks 9","msg_loc": [106.760202, 10.852680],"img": "/images/road2.jpg"}';
        evt_value2[9] = '{"msg_code": "EVT_003","msg_type": "RT","msg_level": 1,"msg_name": "키퍼 Parks 10","msg_loc": [106.760196, 10.852618],"img": "/images/road2.jpg"}';
        evt_value2[10] = '{"msg_code": "EVT_003","msg_type": "RT","msg_level": 2,"msg_name": "키퍼 Parks 11","msg_loc": [106.760170, 10.852541],"img": "/images/road2.jpg"}';

        function send_kafkaMsg(msgType, msgCode) {
            var msg;

            if (msgCode == "evt_001") {
                if (msgType == '1') {
                    msg = evt_01;
                } else if (msgType == '2') {
                    msg = evt_02;
                } else if (msgType == '3') {
                    msg = evt_03;
                } 

                // 서버로 메시지 송신
                socket.emit("kafka_producer", msg);
                console.log("메시지 송신 1");
            } else if (msgCode == "evt_003") {
                var evt_idx1 = 0, evt_idx2 = 0;

                var timerId1 = null, timerId2 = null;

                timerId1 = setInterval(function () {                
                    socket.emit("kafka_producer", evt_value[evt_idx1]);    

                    if (evt_idx1 >= 10) {
                        // evt_idx1 = 0;
                        clearInterval(timerId1);
                    } else {                        
                        evt_idx1++;
                    }
                }, 3000);
                timerId2 = setInterval(function () {                
                    socket.emit("kafka_producer", evt_value2[evt_idx2]);    

                    if (evt_idx2 >= 10) {
                        // evt_idx2 = 0;
                        clearInterval(timerId2);
                    } else {                        
                        evt_idx2++;
                    }
                }, 2000);
            }
        }

        var zoomslider = new ol.control.ZoomSlider();
        map.addControl(zoomslider);

        var layerSwitcher = new ol.control.LayerSwitcher({
            tipLabel: 'Légende', // Optional label for button
            groupSelectStyle: 'children' // Can be 'children' [default], 'group' or 'none'
        });
        map.addControl(layerSwitcher);
        
        var currZoom = map.getView().getZoom();

        // if (currZoom < 15) {
        //     vector_intersection.setVisible(false);
        // } else {
        //     vector_intersection.setVisible(true);
        // }

        // if (currZoom < 16) {
        //     vector_cctv.setVisible(false);
        // } else {
        //     vector_cctv.setVisible(true);
        // }

        // if (currZoom < 17) {
        //     vector_keeper.setVisible(false);
        // } else {
        //     vector_keeper.setVisible(true);
        // }
        map.on('moveend', function(e) {
            //console.log(view.getResolution());
            var newZoom = map.getView().getZoom();
            if (currZoom != newZoom) {
                console.log('zoom end, new zoom: ' + newZoom);
                currZoom = newZoom;
                // if (currZoom < 15) {
                //     vector_intersection.setVisible(false);
                // } else {
                //     vector_intersection.setVisible(true);
                // }

                // if (currZoom < 16) {
                //     vector_cctv.setVisible(false);
                // } else {
                //     vector_cctv.setVisible(true);
                // }

                // if (currZoom < 17) {
                //     vector_keeper.setVisible(false);
                // } else {
                //     vector_keeper.setVisible(true);
                // }
            }
        });

        function flyTo(location, done) {
            var duration = 2000;
            var zoom = view.getZoom();
            var parts = 2;
            var called = false;
            function callback(complete) {
                --parts;
                if (called) {
                    return;
                }
                if (parts === 0 || !complete) {
                    called = true;
                    done(complete);
                }
            }
            view.animate({
                center: location,
                duration: duration
            }, callback);
            view.animate({
                zoom: zoom - 1,
                duration: duration / 2
            }, {
                zoom: zoom,
                duration: duration / 2
            }, callback);
        }

        var source_temp = new ol.source.Vector({
            wrapX: false
        });
        var vector_temp = new ol.layer.Vector({
            source: source_temp
        });
        map.addLayer(vector_temp);                

        var evt_popup = new ol.Overlay.Popup({
            popupClass: "black", //"tooltips", "warning" "black" "default", "tips", "shadow",
            closeBox: true,
            onclose: function () { console.log("You close the box"); },
            positioning: "bottom-center",
            autoPan: true,
            autoPanAnimation: { duration: 100 }
        });
        map.addOverlay(evt_popup);

        var evt_keeper_popup = new ol.Overlay.Popup({
            popupClass: "warning", //"tooltips", "warning" "black" "default", "tips", "shadow",
            closeBox: true,
            onclose: function () { console.log("You close the box"); },
            positioning: "bottom-center",
            autoPan: true,
            autoPanAnimation: { duration: 100 }
        });
        map.addOverlay(evt_keeper_popup);

        var socket = io.connect();

        // 서버로부터 메시지 수신
        socket.on('kafka_consumer', function (data) {
            // console.log(data);
            var payload = JSON.parse(data.value);

            if (payload.msg_code == 'EVT_001') {
                flyTo(payload.msg_loc, function () { });

                var content = "";
                content += "<div><img src='" + payload.img + "' width='350px' height='250px' /></div>";
                content += "<div style='text-align:center;margin: 1em 1em 1em 1em;'>";
                content += payload.msg_name;
                content += "</div>";
                evt_popup.show(payload.msg_loc, content);
            } else if (payload.msg_code == 'EVT_003') {
                // console.log(payload.msg_loc);

                var x_loc = payload.msg_loc[0];
                var y_loc = payload.msg_loc[1];
               
                var geom = new ol.geom.Point([x_loc, y_loc]);
                var feature = new ol.Feature({
                    geometry: geom,
                    code: payload.msg_code,
                    type: payload.msg_type,
                    level: payload.msg_level,
                    name: payload.msg_name,
                    img: payload.img
                });
                if (payload.msg_level == 1) {
                    feature.setStyle(new ol.style.Style({
                        fill: new ol.style.Fill({
                            color: 'rgba(255, 255, 255, 0.2)'
                        }),
                        stroke: new ol.style.Stroke({
                            color: '#ffffff',
                            width: 2
                        }),
                        image: new ol.style.Circle({
                            radius: 7,
                            fill: new ol.style.Fill({
                            color: '#008CBA'
                            })
                        })
                    }));
                } else if (payload.msg_level == 2) {
                    feature.setStyle(new ol.style.Style({
                        fill: new ol.style.Fill({
                            color: 'rgba(255, 255, 255, 0.2)'
                        }),
                        stroke: new ol.style.Stroke({
                            color: '#ffffff',
                            width: 2
                        }),
                        image: new ol.style.Circle({
                            radius: 7,
                            fill: new ol.style.Fill({
                            color: '#ffcc33'
                            })
                        })
                    }));
                } else if (payload.msg_level == 3) {
                    feature.setStyle(new ol.style.Style({
                        fill: new ol.style.Fill({
                            color: 'rgba(255, 255, 255, 0.2)'
                        }),
                        stroke: new ol.style.Stroke({
                            color: '#ffffff',
                            width: 2
                        }),
                        image: new ol.style.Circle({
                            radius: 7,
                            fill: new ol.style.Fill({
                            color: '#CC0000'
                            })
                        })
                    }));
                }
                source_temp.addFeature(feature);
            }
        });

        // Control Select 
        var select = new ol.interaction.Select({});
        map.addInteraction(select);

        // On selected => show/hide popup
        select.getFeatures().on(['add'], function(e) {  console.log(e);
            var feature = e.element;
            var content = "";
            content += "<img src='"+feature.get("img")+"'/>";
            content += feature.get("name");
            if (feature.get("level") == 1) {
                evt_keeper_popup.setPopupClass("default black");
            } else if (feature.get("level") == 2) {
                evt_keeper_popup.setPopupClass("orange black");
            } else if (feature.get("level") == 3) {
                evt_keeper_popup.setPopupClass("red black");
            }
            // popupClass: "warning", //"tooltips", "warning" "black" "default", "tips", "shadow",
            evt_keeper_popup.show(feature.getGeometry().getFirstCoordinate(), content); 
        });
        select.getFeatures().on(['remove'], function(e) {
            evt_keeper_popup.hide(); 
        })
    </script>


</body>

</html>