<!doctype html>
<html lang="en">

<% include ./headers/header %>
<style>
    .ol-overlay .ol-fullscreen-image.ol-has-title img {
        padding-bottom: 6em;
    }
    .ol-attribution {
        bottom: 6.5em;
        transition: .3s;
    }
    .noimg .ol-attribution {
        bottom: 0.5em;
    }
    .ol-timeline img {
        max-height: 2.2em;
        float: left;
        margin: .1em .5em .1em .1em
    }
    .ol-timeline .ol-scroll {        
        height: 10em;
    }
    button.go:before {
      content: '';
      position: absolute;
      width: 0;
      height: .8em;
      background: transparent;
      border: 0.4em solid transparent;
      border-right: 0;
      border-left: .6em solid #fff;
      left: 50%;
      right: 50%;
      transform: translate(-50%, -50%);
      box-sizing: border-box;
    }
    .running button.go:before {
      background: transparent;
      width: .2em;
      border: 0;
      box-shadow: .2em 0, -.2em 0;
    }
    button.close:before,
    button.close:after {        
        content: "";
        position: absolute;
        background-color: currentColor;
        top: 50%;
        left: 50%;
        width: 1em;
        height: .1em;
        border-radius: .1em;
        -webkit-transform: translate(-50%, -50%) rotate(45deg);
                transform: translate(-50%, -50%) rotate(45deg);
    }
    button.close:before {
        -webkit-transform: translate(-50%, -50%) rotate(-45deg);
                transform: translate(-50%, -50%) rotate(-45deg);
    }
</style>

<body>

    <div style="height:6%;line-height:60px;vertical-align:middle;">
        <div>
            보기모드 : <button class="cbutton" onclick="location.href='eventmap'">지 도</button>
            <button class="cbutton" onclick="location.href='heatmap'">히트맵</button>
            <button class="cbutton" onclick="location.href='timelinemap'">타임라인</button>
            <button style="float:right;margin-top:10px;" class="cbutton"
                onclick="location.href='testEvent'">테스트</button>
        </div>
    </div>

    <!-- DIV pour la carte -->
    <div id="map" style="height:94%;"></div>


    <script type="text/javascript">
        var view = new ol.View({
            projection: 'EPSG:4326',
            center: [106.764194, 10.854639],
            //center: [127.153789, 35.823685],
            zoom: 14
        });
        var map = new ol.Map({
            target: 'map',
            layers: [
                new ol.layer.Tile({
                    // A layer must have a title to appear in the layerswitcher
                    title: 'VWorld 2D',
                    // Again set this layer as a base layer
                    type: 'base',
                    visible: false,
                    source: new ol.source.XYZ({
                        url: 'http://xdworld.vworld.kr:8080/2d/Base/service/{z}/{x}/{y}.png'
                    })
                }),
                new ol.layer.Tile({
                    // A layer must have a title to appear in the layerswitcher
                    title: 'VWorld 2D 위성지도',
                    // Again set this layer as a base layer
                    type: 'base',
                    visible: false,
                    source: new ol.source.XYZ({
                        url: 'http://xdworld.vworld.kr:8080/2d/Satellite/service/{z}/{x}/{y}.jpeg'
                    })
                }),
                new ol.layer.Tile({
                    // A layer must have a title to appear in the layerswitcher
                    title: 'OSM',
                    // Again set this layer as a base layer
                    type: 'base',
                    visible: true,
                    source: new ol.source.OSM()
                })
            ],
            // interactions: ol.interaction.defaults({ altShiftDragRotate:false, pinchRotate:false }),
            view: view
        });

        var contextmenu = new ContextMenu({
            width: 170,
            defaultItems: true,
            items: [                
                {
                text: '좌표 확인',
                classname: 'some-style-class',
                // icon: 'img/marker.png',
                callback: coords_chk
                },
                '-' // this is a separator
            ]
        });
        map.addControl(contextmenu);

        function coords_chk(obj) {
            alert(obj.coordinate);
        }

        // Array to cache image style
        var styleCache = {};

        // Vector style
        function getFeatureStyle(feature, resolution, sel) {
            var k = feature.get("icon").match(/[^\\/]+$/)[0];
            // console.log(k);
            var style = styleCache[k];
            if (!style) {
                styleCache[k] = style = new ol.style.Style({
                    image: new ol.style.Icon({
                        src: feature.get("icon")
                    })
                });
            }
            return [style];
        }

        // GeoJSON layer
        var vectorSource_intersection = new ol.source.Vector({
            url: '/data/evt-intersection.geojson',
            projection: 'EPSG:3857',
            format: new ol.format.GeoJSON()
        });
        var vector_intersection = new ol.layer.Vector({
            name: 'intersection-layer',
            source: vectorSource_intersection,
            renderOrder: ol.ordering.yOrdering(),
            style: getFeatureStyle
        });
        map.addLayer(vector_intersection);

        // GeoJSON layer
        var vectorSource_cctv = new ol.source.Vector({
            url: '/data/evt-cctv.geojson',
            projection: 'EPSG:3857',
            format: new ol.format.GeoJSON()
        });
        var vector_cctv = new ol.layer.Vector({
            name: 'cctv-layer',
            source: vectorSource_cctv,
            // y ordering
            renderOrder: ol.ordering.yOrdering(),
            style: getFeatureStyle
        });
        map.addLayer(vector_cctv);

         // GeoJSON layer
         var vectorSource_keeper = new ol.source.Vector({
            url: '/data/evt-keeper.geojson',
            projection: 'EPSG:3857',
            format: new ol.format.GeoJSON()
        });
        var vector_keeper = new ol.layer.Vector({
            name: 'keeper-layer',
            source: vectorSource_keeper,
            // y ordering
            renderOrder: ol.ordering.yOrdering(),
            style: getFeatureStyle
        });
        map.addLayer(vector_keeper);

        // var home = new ol.Overlay.Placemark({
        //     // color: '#369',
        //     // backgroundColor : 'yellow',
        //     contentColor: '#000',
        // });
        // map.addOverlay(home);
        // home.show([106.764194, 10.854639]);

        var zoomslider = new ol.control.ZoomSlider();
        map.addControl(zoomslider);

        var layerSwitcher = new ol.control.LayerSwitcher({
            tipLabel: 'Légende', // Optional label for button
            groupSelectStyle: 'children' // Can be 'children' [default], 'group' or 'none'
        });
        map.addControl(layerSwitcher);

        var currZoom = map.getView().getZoom();
        
        if (currZoom < 15) {
            vector_intersection.setVisible(false);
        } else {
            vector_intersection.setVisible(true);
        }
        if (currZoom < 16) {
            vector_cctv.setVisible(false);
        } else {
            vector_cctv.setVisible(true);
        }
        if (currZoom < 17) {
            vector_keeper.setVisible(false);
        } else {
            vector_keeper.setVisible(true);
        }

        map.on('moveend', function (e) {
            // console.log(view.getResolution());
            var newZoom = map.getView().getZoom();
            if (currZoom != newZoom) {
                console.log('zoom end, new zoom: ' + newZoom);
                currZoom = newZoom;
                if (currZoom < 15) {
                    vector_intersection.setVisible(false);
                } else {
                    vector_intersection.setVisible(true);
                }
                if (currZoom < 16) {
                    vector_cctv.setVisible(false);
                } else {
                    vector_cctv.setVisible(true);
                }
                if (currZoom < 17) {
                    vector_keeper.setVisible(false);
                } else {
                    vector_keeper.setVisible(true);
                }
            }
        });
      
        // Select  interaction
        var select = new ol.interaction.Select({
            hitTolerance: 10,
            multi: true,
            style: new ol.style.Style({
                image: new ol.style.Icon({
                    src: "/images/pin_red.png"
                })           
            })
        });
        map.addInteraction(select);

        // Select control
        var popup = new ol.Overlay.PopupFeature({
            popupClass: "default anim", //"tooltips", "warning" "black" "default", "tips", "shadow",
            positioning: "bottom-center",            
            offset: [0, -20],
            select: select,
            canFix: true,
            onclose: function(f) {
                console.log("close");
            },
            onshow: function(f) {                
                console.log("show");
            },
            template: {
                title: function(f) {
                    return f.get('title'); //+' ('+f.get('id')+')';
                },
                attributes:
                {
                    'evtImg': {
                        title: 'evtImg',
                        src: function(f) {
                            return f.get('evtImg');
                        }
                    },
                    'date': { 
                        title: 'Date', 
                        before: '시간 : ',
                        format: ol.Overlay.PopupFeature.localString()                         
                    },                
                    'locAddr': { title: 'locAddr', before: '위치 : ' },
                    'chargeName': { title: 'chargeName', before: '담당자 : ' },
                    'evtSubType': { title: 'evtSubType' },
                    'deviceState': { title: 'deviceState' }      
                }
            }
        });
        map.addOverlay(popup);

        function flyTo(location, done) {
            var duration = 2000;
            var zoom = view.getZoom();
            var parts = 2;
            var called = false;
            function callback(complete) {
                --parts;
                if (called) {
                    return;
                }
                if (parts === 0 || !complete) {
                    called = true;
                    done(complete);
                }
            }
            view.animate({
                center: location,
                duration: duration
            }, callback);
            view.animate({
                zoom: zoom - 1,
                duration: duration / 2
            }, {
                zoom: zoom,
                duration: duration / 2
            }, callback);
        }
        var source_temp = new ol.source.Vector({
            wrapX: false
        });
        var vector_temp = new ol.layer.Vector({
            source: source_temp
        });
        map.addLayer(vector_temp);     

        var evt_popup = new ol.Overlay.Popup({
            popupClass: "black", //"tooltips", "warning" "black" "default", "tips", "shadow",
            closeBox: true,
            onclose: function () { console.log("You close the box"); },
            positioning: "bottom-center",
            autoPan: true,
            autoPanAnimation: { duration: 100 }
        });
        map.addOverlay(evt_popup);

        var evt_keeper_popup = new ol.Overlay.Popup({
            popupClass: "warning", //"tooltips", "warning" "black" "default", "tips", "shadow",
            closeBox: true,
            onclose: function () { console.log("You close the box"); },
            positioning: "bottom-center",
            autoPan: true,
            autoPanAnimation: { duration: 100 }
        });
        map.addOverlay(evt_keeper_popup);
        
        var socket = io.connect();
        // 서버로부터 메시지 수신
        socket.on('kafka_consumer', function (data) {
            console.log(data);
            var payload = JSON.parse(data.value);
            if (payload.msg_code == 'EVT_001') {
                flyTo(payload.msg_loc, function () { });
                var content = "";
                content += "<div><img src='" + payload.img + "' width='350px' height='250px' /></div>";
                content += "<div style='text-align:center;margin: 1em 1em 1em 1em;'>";
                content += payload.msg_name;
                content += "</div>";
                evt_popup.show(payload.msg_loc, content);
            } else if (payload.msg_code == 'EVT_003') {
                // console.log(payload.msg_loc);
                var x_loc = payload.msg_loc[0];
                var y_loc = payload.msg_loc[1];
               
                var geom = new ol.geom.Point([x_loc, y_loc]);
                var feature = new ol.Feature({
                    geometry: geom,
                    code: payload.msg_code,
                    type: payload.msg_type,
                    level: payload.msg_level,
                    name: payload.msg_name,
                    img: payload.img
                });
                if (payload.msg_level == 1) {
                    feature.setStyle(new ol.style.Style({
                        fill: new ol.style.Fill({
                            color: 'rgba(255, 255, 255, 0.2)'
                        }),
                        stroke: new ol.style.Stroke({
                            color: '#ffffff',
                            width: 2
                        }),
                        image: new ol.style.Circle({
                            radius: 7,
                            fill: new ol.style.Fill({
                            color: '#008CBA'
                            })
                        })
                    }));
                } else if (payload.msg_level == 2) {
                    feature.setStyle(new ol.style.Style({
                        fill: new ol.style.Fill({
                            color: 'rgba(255, 255, 255, 0.2)'
                        }),
                        stroke: new ol.style.Stroke({
                            color: '#ffffff',
                            width: 2
                        }),
                        image: new ol.style.Circle({
                            radius: 7,
                            fill: new ol.style.Fill({
                            color: '#ffcc33'
                            })
                        })
                    }));
                } else if (payload.msg_level == 3) {
                    feature.setStyle(new ol.style.Style({
                        fill: new ol.style.Fill({
                            color: 'rgba(255, 255, 255, 0.2)'
                        }),
                        stroke: new ol.style.Stroke({
                            color: '#ffffff',
                            width: 2
                        }),
                        image: new ol.style.Circle({
                            radius: 7,
                            fill: new ol.style.Fill({
                            color: '#CC0000'
                            })
                        })
                    }));
                }
                source_temp.addFeature(feature);
            }
        });
        
        // On selected => show/hide popup
        select.getFeatures().on(['add'], function(e) { 
            var feature = e.element;
            if (feature.get("code") == "EVT_003") {
                var content = "";
                content += "<img src='"+feature.get("img")+"'/>";
                content += feature.get("name");
                if (feature.get("level") == 1) {
                    evt_keeper_popup.setPopupClass("default black");
                } else if (feature.get("level") == 2) {
                    evt_keeper_popup.setPopupClass("orange black");
                } else if (feature.get("level") == 3) {
                    evt_keeper_popup.setPopupClass("red black");
                } 
                evt_keeper_popup.show(feature.getGeometry().getFirstCoordinate(), content); 
            }
        });
        
        select.getFeatures().on(['remove'], function(e) {
            evt_keeper_popup.hide(); 
        })

        var cache = {};
        function style(select) {
            // console.log(select);
            return function (f) {
                var style = cache[f.get('evtImg') + '-' + select];
                if (!style) {
                    var img = new ol.style.Photo({
                        src: f.get('evtImg'),
                        radius: select ? 35 : 25,
                        crop: true,
                        kind: 'anchored',
                        shadow: true,
                        stroke: new ol.style.Stroke({
                            width: select ? 3 : 2,
                            color: select ? '#D04545' : '#92A7DA'
                        }),
                        onload: function () { f.changed(); }
                    })
                    style = cache[f.get('evtImg') + '-' + select] = new ol.style.Style({
                        image: img,
                        zIndex: select ? 100 : 90
                    })
                }
                return style;
            }
        };

        // GeoJSON layer with a preview attribute
        var tlineSource_device = new ol.source.Vector({            
            url: '/data/timeline_device.geojson',
            projection: 'EPSG:3857',
            format: new ol.format.GeoJSON()
        });

        var tlineListenerKey_device = tlineSource_device.on('change', function (e) {
            if (tlineSource_device.getState() == 'ready') {
                ol.Observable.unByKey(tlineListenerKey_device);
                tline.refresh();
            }
        });

        var tline_device = new ol.layer.Vector({
            name: 'timeline-layer',
            style: style(),
            source: tlineSource_device
        });      

        var tlineSource_keeper = new ol.source.Vector({            
            url: '/data/timeline_keeper.geojson',
            projection: 'EPSG:3857',
            format: new ol.format.GeoJSON()
        });

        var tlineListenerKey_keeper = tlineSource_keeper.on('change', function (e) {
            if (tlineSource_keeper.getState() == 'ready') {
                ol.Observable.unByKey(tlineListenerKey_keeper);
                tline2.refresh();
            }
        });

        var tline_keeper = new ol.layer.Vector({
            name: 'timeline-layer2',
            style: style(),
            source: tlineSource_keeper
        });      

        var tline = new ol.control.Timeline({
            className: 'ol-zoomhover',
            source: tlineSource_device,
            interval: '3d',
            graduation: 'day', // 'month'
            minDate: new Date('2020-06-28'),
            zoomButton: true,
            getHTML: function (f) { return '<img src="' + f.get('evtImg') + '"/>' + (f.get('text') || ''); },
            getFeatureDate: function (f) {
                return f.get('date');
            },
            endFeatureDate: function (f) {
                var d = f.get('endDate');
                // Create end date
                if (!d) {
                    d = new Date(f.get('date'));
                    d.setDate(d.getDate() + 3);
                    // d = new Date( d.getTime() + (5 + 10*Math.random())*10*24*60*60*1000);
                    f.set('endDate', d);
                }
                return d;
            }
        });
      
        // Select a feature
        tline.on('select', function (e) {   //console.log(e);    
            // Center time line on feature
            // tline.setDate(e.feature);

            // Center map on feature
            map.getView().animate({
                center: e.feature.getGeometry().getCoordinates()
            });

            popup.showImage(e.feature.get("evtImg").replace("_v.jpg", "_p.jpg"), {
                coordinate: (/wipe/.test('zoom') ? e.feature.getGeometry().getCoordinates() : null),
                title: e.feature.get("text") + '<br/>'
            });

            // Select feature on the map
            select.getFeatures().clear();
            select.getFeatures().push(e.feature);
        });

        tline.addButton ({
            className: "go",
            title: "GO!",
            handleClick: function() {
                go();
            }
        });

        tline.addButton ({
            className: "close",
            title: "Close",
            handleClick: function() {
                if (running) clearTimeout(running);
                map.removeLayer(tline_device);
                map.removeControl(tline); 
            }
        });

        // Collapse the line
        tline.on('collapse', function (e) {
            if (e.collapsed) $('#map').addClass('noimg')
            else $('#map').removeClass('noimg')
        });

        // scroll the line
        tline.on('scroll', function (e) {
            tlineSource_device.getFeatures().forEach(function (f) {
                var date = new Date(f.get('date'));
                if (date < e.dateStart || date > e.dateEnd) {
                    f.setStyle([]);
                } else {
                    f.setStyle();
                }
            });
        });

        // var select = new ol.interaction.Select({ hitTolerance: 5, style: style(true) });
        // map.addInteraction(select);

        // select.on('select', function (e) {      //console.log(e);            
        //     var f = e.selected[0];
        //     if (f) {
        //         // Center time line on feature
        //         // tline.setDate(f);

        //         // Center map on feature
        //         map.getView().animate({
        //             center: f.getGeometry().getCoordinates()
        //         });

        //         popup.showImage(f.get("evtImg").replace("_v.jpg", "_p.jpg"), {
        //             coordinate: (/wipe/.test('zoom') ? f.getGeometry().getCoordinates() : null),
        //             title: f.get("text") + '<br/>'
        //         });
        //     }
        // });

        // Run on the timeline
        var running = false; 
        var start = new Date('2020');
        var end = new Date('2021');
        function go(next) {
            var date = tline.getDate();
            if (running) clearTimeout(running);
            if (!next) {
            // stop
            if (date>start && date<end && running) {
                running = false;
                tline.element.classList.remove('running');
                return;
            }
            if (date > end) {
                date = start;
            }
            }
            if (date > end) {
            tline.element.classList.remove('running');
            return;
            }
            if (date < start) {
            date = start;
            }
            // 1 day
            date = new Date(date.getTime() + 24*60*60*1000);
            tline.setDate(date, { anim:false });
            // next
            tline.element.classList.add('running');
            running = setTimeout(function() { go(true); }, 700);
        }




        var tline2 = new ol.control.Timeline({
            className: 'ol-zoomhover',
            source: tlineSource_keeper,
            interval: '2d',
            graduation: 'day', // 'month'
            minDate: new Date('2020-07-01'),
            zoomButton: true,
            getHTML: function (f) { return '<img src="' + f.get('evtImg') + '"/>' + (f.get('text') || ''); },
            getFeatureDate: function (f) {
                return f.get('date');
            },
            endFeatureDate: function (f) {
                var d = f.get('endDate');
                // Create end date
                if (!d) {
                    d = new Date(f.get('date'));
                    d.setDate(d.getDate() + 3);
                    // d = new Date( d.getTime() + (5 + 10*Math.random())*10*24*60*60*1000);
                    f.set('endDate', d);
                }
                return d;
            }
        });
      
        // Select a feature
        tline2.on('select', function (e) {   //console.log(e);    
            // Center time line on feature
            // tline.setDate(e.feature);

            // Center map on feature
            map.getView().animate({
                center: e.feature.getGeometry().getCoordinates()
            });

            popup.showImage(e.feature.get("evtImg").replace("_v.jpg", "_p.jpg"), {
                coordinate: (/wipe/.test('zoom') ? e.feature.getGeometry().getCoordinates() : null),
                title: e.feature.get("text") + '<br/>'
            });

            // Select feature on the map
            select.getFeatures().clear();
            select.getFeatures().push(e.feature);
        });

        tline2.addButton ({
            className: "go",
            title: "GO!",
            handleClick: function() {
                go2();
            }
        });

        tline2.addButton ({
            className: "close",
            title: "Close",
            handleClick: function() {
                if (running2) clearTimeout(running2);
                map.removeLayer(tline_keeper);
                map.removeControl(tline2); 

                map.removeLayer(vector_tline_temp); 
            }
        });

        // Collapse the line
        tline2.on('collapse', function (e) {
            if (e.collapsed) $('#map').addClass('noimg')
            else $('#map').removeClass('noimg')
        });

        var source_tline_temp = new ol.source.Vector({
            wrapX: false
        });
        var vector_tline_temp = new ol.layer.Vector({
            source: source_tline_temp
        });
        
        // scroll the line
        tline2.on('scroll', function (e) {
            tlineSource_keeper.getFeatures().forEach(function (f) { console.log(f.getGeometry().getCoordinates());
                var date = new Date(f.get('date'));
                if (date > e.dateStart) {
                    f.setStyle([]);
                } else {
                    
                    var x_loc = f.getGeometry().getCoordinates()[0];
                    var y_loc = f.getGeometry().getCoordinates()[1];
                
                    var geom = new ol.geom.Point([x_loc, y_loc]);
                    var feature = new ol.Feature({
                        geometry: geom,
                        // code: f.get('msg_code'),
                        type: f.get('msg_type'),
                        level: f.get('msg_level')
                        // name: f.get('msg_name'),
                        // img: f.get('img')
                    });
                    if (f.get('msg_level') == 1) {
                        feature.setStyle(new ol.style.Style({
                            fill: new ol.style.Fill({
                                color: 'rgba(255, 255, 255, 0.2)'
                            }),
                            stroke: new ol.style.Stroke({
                                color: '#ffffff',
                                width: 2
                            }),
                            image: new ol.style.Circle({
                                radius: 7,
                                fill: new ol.style.Fill({
                                color: '#008CBA'
                                })
                            })
                        }));
                    } else if (f.get('msg_level') == 2) {
                        feature.setStyle(new ol.style.Style({
                            fill: new ol.style.Fill({
                                color: 'rgba(255, 255, 255, 0.2)'
                            }),
                            stroke: new ol.style.Stroke({
                                color: '#ffffff',
                                width: 2
                            }),
                            image: new ol.style.Circle({
                                radius: 7,
                                fill: new ol.style.Fill({
                                color: '#ffcc33'
                                })
                            })
                        }));
                    } else if (f.get('msg_level') == 3) {
                        feature.setStyle(new ol.style.Style({
                            fill: new ol.style.Fill({
                                color: 'rgba(255, 255, 255, 0.2)'
                            }),
                            stroke: new ol.style.Stroke({
                                color: '#ffffff',
                                width: 2
                            }),
                            image: new ol.style.Circle({
                                radius: 7,
                                fill: new ol.style.Fill({
                                color: '#CC0000'
                                })
                            })
                        }));
                    }
                    source_tline_temp.addFeature(feature);

                    if (f.get('msg_level') == 2 || f.get('msg_level') == 3) {
                        f.setStyle();
                    }
                }
            });
        });

        // var select = new ol.interaction.Select({ hitTolerance: 5, style: style(true) });
        // map.addInteraction(select);

        // select.on('select', function (e) {      //console.log(e);            
        //     var f = e.selected[0];
        //     if (f) {
        //         // Center time line on feature
        //         // tline.setDate(f);

        //         // Center map on feature
        //         map.getView().animate({
        //             center: f.getGeometry().getCoordinates()
        //         });

        //         popup.showImage(f.get("evtImg").replace("_v.jpg", "_p.jpg"), {
        //             coordinate: (/wipe/.test('zoom') ? f.getGeometry().getCoordinates() : null),
        //             title: f.get("text") + '<br/>'
        //         });
        //     }
        // });

         // Run on the timeline
        var running2 = false; 
        var start2 = new Date('2020');
        var end2 = new Date('2021');
        function go2(next) {
            var date = tline2.getDate();
            if (running2) clearTimeout(running2);
            if (!next) {
            // stop
            if (date>start2 && date<end2 && running2) {
                running2 = false;
                tline2.element.classList.remove('running');
                return;
            }
            if (date > end2) {
                date = start2;
            }
            }
            if (date > end2) {
            tline2.element.classList.remove('running');
            return;
            }
            if (date < start2) {
            date = start2;
            }
            // 1 day
            date = new Date(date.getTime() + 24*60*60*1000);
            tline2.setDate(date, { anim:false });
            // next
            tline2.element.classList.add('running');
            running2 = setTimeout(function() { go2(true); }, 700);
        }
    </script>

</body>
</html>
