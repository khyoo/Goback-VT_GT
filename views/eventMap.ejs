<!doctype html>
<html lang="en">

<% include ./headers/header %>

<body>

    <div style="height:6%;line-height:60px;vertical-align:middle;">
        <div>
            보기모드 : <button class="cbutton" onclick="location.href='eventmap'">지 도</button>
            <button class="cbutton" onclick="location.href='heatmap'">히트맵</button>
            <button class="cbutton" onclick="location.href='timelinemap'">타임라인</button>
            <button style="float:right;margin-top:10px;" class="cbutton"
                onclick="location.href='testEvent'">테스트</button>
        </div>
    </div>

    <!-- DIV pour la carte -->
    <div id="map" style="height:94%;"></div>


    <script type="text/javascript">

        var view = new ol.View({
            projection: 'EPSG:4326',
            center: [106.764194, 10.854639],
            //center: [127.153789, 35.823685],
            zoom: 14
        });

        var map = new ol.Map({
            target: 'map',
            layers: [
                new ol.layer.Tile({
                    // A layer must have a title to appear in the layerswitcher
                    title: 'VWorld 2D',
                    // Again set this layer as a base layer
                    type: 'base',
                    visible: false,
                    source: new ol.source.XYZ({
                        url: 'http://xdworld.vworld.kr:8080/2d/Base/service/{z}/{x}/{y}.png'
                    })
                }),
                new ol.layer.Tile({
                    // A layer must have a title to appear in the layerswitcher
                    title: 'VWorld 2D 위성지도',
                    // Again set this layer as a base layer
                    type: 'base',
                    visible: false,
                    source: new ol.source.XYZ({
                        url: 'http://xdworld.vworld.kr:8080/2d/Satellite/service/{z}/{x}/{y}.jpeg'
                    })
                }),
                new ol.layer.Tile({
                    // A layer must have a title to appear in the layerswitcher
                    title: 'OSM',
                    // Again set this layer as a base layer
                    type: 'base',
                    visible: true,
                    source: new ol.source.OSM()
                })
            ],
            interactions: ol.interaction.defaults({ altShiftDragRotate:false, pinchRotate:false }),
            view: view
        });

        // Array to cache image style
        var styleCache = {};

        // Vector style
        function getFeatureStyle(feature, resolution, sel) {
            var k = feature.get("icon").match(/[^\\/]+$/)[0];
            // console.log(k);
            var style = styleCache[k];
            if (!style) {
                styleCache[k] = style = new ol.style.Style({
                    image: new ol.style.Icon({
                        src: feature.get("icon")
                    })
                });
            }
            return [style];
        }

        // GeoJSON layer
        var vectorSource_intersection = new ol.source.Vector({
            url: '/data/evt-intersection.geojson',
            projection: 'EPSG:3857',
            format: new ol.format.GeoJSON()
        });

        var vector_intersection = new ol.layer.Vector({
            name: 'intersection-layer',
            source: vectorSource_intersection,
            renderOrder: ol.ordering.yOrdering(),
            style: getFeatureStyle
        });

        map.addLayer(vector_intersection);

        // GeoJSON layer
        var vectorSource_cctv = new ol.source.Vector({
            url: '/data/evt-cctv.geojson',
            projection: 'EPSG:3857',
            format: new ol.format.GeoJSON()
        });

        var vector_cctv = new ol.layer.Vector({
            name: 'cctv-layer',
            source: vectorSource_cctv,
            // y ordering
            renderOrder: ol.ordering.yOrdering(),
            style: getFeatureStyle
        });

        map.addLayer(vector_cctv);

         // GeoJSON layer
         var vectorSource_keeper = new ol.source.Vector({
            url: '/data/evt-keeper.geojson',
            projection: 'EPSG:3857',
            format: new ol.format.GeoJSON()
        });

        var vector_keeper = new ol.layer.Vector({
            name: 'keeper-layer',
            source: vectorSource_keeper,
            // y ordering
            renderOrder: ol.ordering.yOrdering(),
            style: getFeatureStyle
        });

        map.addLayer(vector_keeper);

        // var home = new ol.Overlay.Placemark({
        //     // color: '#369',
        //     // backgroundColor : 'yellow',
        //     contentColor: '#000',
        // });

        // map.addOverlay(home);
        // home.show([106.764194, 10.854639]);

        function flyTo(location, done) {
            var duration = 2000;
            var zoom = view.getZoom();
            var parts = 2;
            var called = false;
            function callback(complete) {
                --parts;
                if (called) {
                    return;
                }
                if (parts === 0 || !complete) {
                    called = true;
                    done(complete);
                }
            }
            view.animate({
                center: location,
                duration: duration
            }, callback);
            view.animate({
                zoom: zoom - 1,
                duration: duration / 2
            }, {
                zoom: zoom,
                duration: duration / 2
            }, callback);
        }

        // var popup = new ol.Overlay.Popup({
        //     popupClass: "default anim", //"tooltips", "warning" "black" "default", "tips", "shadow",
        //     closeBox: false,
        //     onclose: function () { console.log("You close the box"); },
        //     positioning: "bottom-center",
        //     autoPan: true,
        //     autoPanAnimation: { duration: 100 }
        // });
        // map.addOverlay(popup);

        var socket = io.connect();

        // 서버로부터 메시지 수신
        socket.on('kafka_consumer', function (data) {
            // console.log(data);
            var payload = JSON.parse(data.value);

            home.hide();

            flyTo(payload.msg_loc, function () { });

            var content = "";
            content += "<div><img src='/images/" + payload.img + "' width='350px' height='250px' /></div>";
            content += "<div style='text-align:center;margin: 1em 1em 1em 1em;'>";
            content += payload.msg_name;
            content += "</div>";
            popup.show(payload.msg_loc, content);
        });

        var zoomslider = new ol.control.ZoomSlider();
        map.addControl(zoomslider);

        var layerSwitcher = new ol.control.LayerSwitcher({
            tipLabel: 'Légende', // Optional label for button
            groupSelectStyle: 'children' // Can be 'children' [default], 'group' or 'none'
        });
        map.addControl(layerSwitcher);

        var currZoom = map.getView().getZoom();
        if (currZoom < 15) {
            vector_intersection.setVisible(false);
        } else {
            vector_intersection.setVisible(true);
        }

        if (currZoom < 16) {
            vector_cctv.setVisible(false);
        } else {
            vector_cctv.setVisible(true);
        }

        if (currZoom < 17) {
            vector_keeper.setVisible(false);
        } else {
            vector_keeper.setVisible(true);
        }

        map.on('moveend', function (e) {
            // console.log(view.getResolution());
            var newZoom = map.getView().getZoom();
            if (currZoom != newZoom) {
                console.log('zoom end, new zoom: ' + newZoom);
                currZoom = newZoom;
                if (currZoom < 15) {
                    vector_intersection.setVisible(false);
                } else {
                    vector_intersection.setVisible(true);
                }

                if (currZoom < 16) {
                    vector_cctv.setVisible(false);
                } else {
                    vector_cctv.setVisible(true);
                }

                if (currZoom < 17) {
                    vector_keeper.setVisible(false);
                } else {
                    vector_keeper.setVisible(true);
                }
            }
        });

        // POI 클릭 시, 선택된 아이콘
        var selStyle = new ol.style.Style({
            image: new ol.style.Icon({
                src: "/images/pin.png"
            })           
        });

        // Select  interaction
        var select = new ol.interaction.Select({
            hitTolerance: 5,
            multi: true,
            style: selStyle,
            condition: ol.events.condition.singleClick
        });
        map.addInteraction(select);

        // Select control
        var popup = new ol.Overlay.PopupFeature({
            popupClass: "default anim", //"tooltips", "warning" "black" "default", "tips", "shadow",
            positioning: "bottom-center",
            offset: [0, -20],
            select: select,
            canFix: true,
            onclose: function(f) {
                console.log("close");
            },
            onshow: function(f) {                
                console.log("show");
            },
            template: {
                title: function(f) {
                    return f.get('title'); //+' ('+f.get('id')+')';
                },
                attributes:
                {
                    'evtImg': {
                        title: 'evtImg',
                        src: function(f) {
                            return f.get('evtImg');
                        }
                    },
                    'date': { 
                        title: 'Date', 
                        before: '시간 : ',
                        format: ol.Overlay.PopupFeature.localString()                         
                    },                
                    'locAddr': { title: 'locAddr', before: '위치 : ' },
                    'chargeName': { title: 'chargeName', before: '담당자 : ' },
                    'evtSubType': { title: 'evtSubType' },
                    'deviceState': { title: 'deviceState' }      
                }
            }
        });
        map.addOverlay (popup);
    </script>

</body>
</html>