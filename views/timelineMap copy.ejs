<!doctype html>
<html lang="en">

<% include ./headers/header %>
<style>
    button.go:before {
        content: '';
        position: absolute;
        width: 0;
        height: .8em;
        background: transparent;
        border: 0.4em solid transparent;
        border-right: 0;
        border-left: .6em solid #fff;
        left: 50%;
        right: 50%;
        transform: translate(-50%, -50%);
        box-sizing: border-box;
    }

    .running button.go:before {
        background: transparent;
        width: .2em;
        border: 0;
        box-shadow: .2em 0, -.2em 0;
    }
</style>

<body>

    <div style="height:6%;line-height:60px;vertical-align:middle;">
        <div>
            보기모드 : <button class="cbutton" onclick="location.href='eventmap'">지 도</button>
            <button class="cbutton" onclick="location.href='heatmap'">히트맵</button>
            <button class="cbutton" onclick="location.href='timelinemap'">타임라인</button>

        </div>
        <!-- <div style="float:right;">
                <button class="cbutton">키 퍼</button>
                <button class="cbutton">감 시</button>
                <button class="cbutton">교차로</button>
            </div> -->
    </div>

    <!-- DIV pour la carte -->
    <div id="map" style="height:94%;"></div>

    <script type="text/javascript">
        // Style function
        var cache = {};
        function style(select) {
            return function (f) {
                var style = cache[f.get('evtImg') + '-' + select];
                if (!style) {
                    var img = new ol.style.Photo({
                        src: f.get('evtImg'),
                        radius: select ? 20 : 15,
                        shadow: true,
                        stroke: new ol.style.Stroke({
                            width: 4,
                            color: select ? '#fff' : '#fafafa'
                        }),
                        onload: function () { f.changed(); }
                    })
                    style = cache[f.get('evtImg') + '-' + select] = new ol.style.Style({
                        image: img
                    })
                }
                return style;
            }
        };

        // GeoJSON layer with a preview attribute
        var vectorSource = new ol.source.Vector({
            url: '/data/timeline.geojson',
            projection: 'EPSG:3857',
            format: new ol.format.GeoJSON()
        });

        var listenerKey = vectorSource.on('change', function (e) {
            if (vectorSource.getState() == 'ready') {
                ol.Observable.unByKey(listenerKey);
                tline.refresh();
            }
        });

        var vector = new ol.layer.Vector({
            name: 'timeline-layer',
            source: vectorSource,
            style: style()
        });



        var view = new ol.View({
            projection: 'EPSG:4326',
            center: [127.153789, 35.823685],
            zoom: 16
        });

        var map = new ol.Map({
            target: 'map',
            layers: [
                new ol.layer.Tile({
                    // A layer must have a title to appear in the layerswitcher
                    title: 'VWorld 2D',
                    // Again set this layer as a base layer
                    type: 'base',
                    visible: false,
                    source: new ol.source.XYZ({
                        url: 'http://xdworld.vworld.kr:8080/2d/Base/service/{z}/{x}/{y}.png'
                    })
                }),
                new ol.layer.Tile({
                    // A layer must have a title to appear in the layerswitcher
                    title: 'VWorld 2D 위성지도',
                    // Again set this layer as a base layer
                    type: 'base',
                    visible: true,
                    source: new ol.source.XYZ({
                        url: 'http://xdworld.vworld.kr:8080/2d/Satellite/service/{z}/{x}/{y}.jpeg'
                    })
                }),
                new ol.layer.Tile({
                    // A layer must have a title to appear in the layerswitcher
                    title: 'OSM',
                    // Again set this layer as a base layer
                    type: 'base',
                    visible: false,
                    source: new ol.source.OSM()
                }),
                vector
            ],
            view: view
        });

        var zoomslider = new ol.control.ZoomSlider();
        map.addControl(zoomslider);

        var layerSwitcher = new ol.control.LayerSwitcher({
            tipLabel: 'Légende', // Optional label for button
            groupSelectStyle: 'children' // Can be 'children' [default], 'group' or 'none'
        });
        map.addControl(layerSwitcher);



        // Popup overlay
        var popup = new ol.control.Overlay({ hideOnClick: true, className: 'zoom frompoint' });
        map.addControl(popup);

        // Set wipe parameters before/after vivibility change
        popup.on("change:visible", function (e) {
            // wipe needs to know the size of the element to clip on
            if (/wipe/.test('zoom frompoint')) {
                if (e.visible) {
                    $(e.element).css("clip", "rect(0px," + map.getSize()[0] + "px," + map.getSize()[1] + "px,0px)");
                } else {
                    $(e.element).css("clip", "rect(0px,0px," + map.getSize()[1] + "px,0px)");
                }
            }
            // Reset clip for others
            else $(e.element).css("clip", "");
        });


        // Create Timeline control when features are loaded
        var tline = new ol.control.Timeline({
            className: 'ol-zoomhover',
            source: vectorSource,
            interval: '3d',
            graduation: 'day', // 'month'
            zoomButton: false,
            getHTML: function (f) { return '<img src="' + f.get('evtImg') + '"/>'; },
            getFeatureDate: function (f) { return f.get('date'); },
            endFeatureDate: function (f) {
                var d = f.get('endDate');
                // Create end date
                if (!d) {
                    d = new Date(f.get('date'));
                    d = new Date(d.getTime() + (5 + 10 * Math.random()) * 10 * 24 * 60 * 60 * 1000);
                    f.set('endDate', d);
                }
                return d;
            }
        });
        map.addControl(tline);

        // Set the date when ready
        // setTimeout(function () { tline.setDate('2015'); });
        // tline.addButton({
        //     className: "go",
        //     title: "GO!",
        //     handleClick: function () {
        //         go();
        //     }
        // });

        // Select a feature
        tline.on('select', function (e) {
            // Center map on feature
            map.getView().animate({
                center: e.feature.getGeometry().getCoordinates(),
                zoom: 16
            });
            // Center time line on feature
            tline.setDate(e.feature);
            // Select feature on the map
            select.getFeatures().clear();
            select.getFeatures().push(e.feature);
        });

        // Collapse the line
        // tline.on('collapse', function (e) {
        //     if (e.collapsed) $('#map').addClass('noimg')
        //     else $('#map').removeClass('noimg')
        // });

        // scroll the line
        // tline.on('scroll', function (e) {
        //     // $('.options .date').text(e.date.toLocaleDateString());
        //     var d = tline.roundDate(e.date, 'day')
        //     $('.dateStart').text(d.toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' }));
        //     // Filter features visibility
        //     vectorSource.getFeatures().forEach(function (f) {
        //         var dt = f.get('time') - e.date;
        //         if (Math.abs(dt) > 1000 * 3600 * 12) {
        //             f.setStyle([]);
        //         } else {
        //             f.setStyle();
        //         }
        //     });
        // });

        // Remove selection on close
        // popup.on("change:visible", function (e) { if (!e.visible) select.getFeatures().clear(); });

        // var select = new ol.interaction.Select({ hitTolerance: 5, style: style(true) });
        // map.addInteraction(select);

        // select.on('select', function(e){
        //     var f = e.selected[0];
        //     if (f) {
        //     tline.setDate(f);
        //     }
        // });

        // Control Select 
        // var select = new ol.interaction.Select({ hitTolerance: 5, style: style(true) });
        // map.addInteraction(select);


        // On selected => show/hide popup
        // select.getFeatures().on('add', function (e) {
        //     var feature = e.element;
        //     popup.showImage(feature.get("img").replace("_v.jpg", "_p.jpg"), {
        //         coordinate: (/frompoint/.test($("#anim").val()) ? feature.getGeometry().getCoordinates() : null),
        //         title: feature.get("text") + '<br/>'
        //             + feature.get("commune") + " (" + feature.get("region") + " - " + feature.get("date").replace(".", "/") + ")<br/>"
        //             + "&copy; " + feature.get("copy") + " - " + feature.get("author")
        //     });
        //     /*
        //     var img = $("<img>").attr("src", feature.get("img").replace("_v.jpg","_p.jpg"));
        //     popup.show(img.get(0).outerHTML, /frompoint/.test($("#anim").val()) ? feature.getGeometry().getCoordinates():null);
        //     */
        // });

       


    </script>


</body>

</html>